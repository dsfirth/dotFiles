" vimrc
" Author: Darren S. Firth
" Source: https://github.com/dsfirth/dotfiles/vim
"
"

" Preamble ---------------------------------------------------------------- {{{

" On Windows, always use '.vim' instead of 'vimfiles'; this makes synchronization across (heterogeneous) systems easier.
if has("win32") || has("win64")
	set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
endif

filetype off				" required! (says Vundle)
set rtp+=~/.vim/bundle/vundle
call vundle#rc()
filetype plugin indent on	" automatically detect filetype - required (by Vundle)!
set nocompatible			" be iMproved

" }}}
" Basic options ----------------------------------------------------------- {{{

set encoding=utf-8			" character encoding used in Vim: "utf-8" is required for vim-powerline

set autoindent
set cmdheight=2				" number of lines used for the command-line
set noshowmode				" hide the default mode text (e.g. -- INSERT -- ) below the statusline
set showcmd					" show (partial) command keys in the status line
set hidden					" don't unload a buffer when no longer shown in a window
set backspace=indent,eol,start
set number
set ruler					" show cursor position below each window
set laststatus=2			" when to use a status line (2: always)
set history=500				" keep 50 lines of command line history
set listchars=eol:¬,tab:\|\ ,trail:·,extends:›,precedes:‹
set colorcolumn=+1

" Bundles (plugins) {{{

" let Vundle manage Vundle, required!
Bundle 'gmarik/vundle'

" General
Bundle 'altercation/vim-colors-solarized'
Bundle 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 1
if has("gui_running")
	if has("gui_win32")
		let g:a=4			" number of spaces used for each step of (auto)indent
		let g:airline_powerline_fonts = 1
	endif
endif
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-shell'

" General Programming
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'PProvost/vim-ps1'

" }}}
" Wildmenu completion {{{

set wildmenu				" command-line completion shows a list of matches
set wildmode=list:longest	" specifies <Tab> completion; list matches, then longest common part

" }}}
" Tabs, spacing, wrapping {{{

set tabstop=4				" number of spaces a <Tab> in the text stands for
set shiftwidth=4			" number of spaces used for each step of (auto)indent
set softtabstop=4			" if non-zero, number of spaces to insert for a <Tab>
set nowrap					" long lines do [not] wrap
set textwidth=120			" line length above which to break a line

" }}}
" Colour scheme {{{

syntax on
set background=dark
colorscheme solarized

" }}}
" Backups {{{

" Keep persistent vim files (.swp, etc.) off my lawn!
" original source: https://github.com/spf13/spf13-vim (modified)
function! InitializeDirectories() "{{{
	let parent = $HOME . '/.vim'
	let dir_list = {
	            \ 'backup': 'backupdir',
	            \ 'views': 'viewdir',
	            \ 'swap': 'directory' }

	if has('persistent_undo')
		let dir_list['undo'] = 'undodir'
	endif

	for [dirname, settingname] in items(dir_list)
		let directory = parent . '/' . dirname . "/"
		if exists("*mkdir")
			if !isdirectory(directory)
				call mkdir(directory)
			endif
		endif
		if !isdirectory(directory)
			echo "Warning: Unable to create backup directory: " . directory
			echo "Try: mkdir -p " . directory
		else
			let directory = substitute(directory, " ", "\\\\ ", "g")
			exec "set " . settingname . "=" . directory
		endif
	endfor
endfunction "}}}
call InitializeDirectories()

" }}}

" }}}
" Convenience mappings ---------------------------------------------------- {{{

" mappings to access buffers
" \l        : list buffers
" \b \f \g  : go back/forward/last-used
nnoremap <silent> <Leader>l :ls<CR>
nnoremap <silent> <Leader>b :bp<CR>
nnoremap <silent> <Leader>f :bn<CR>
nnoremap <silent> <Leader>g :e#<CR>

" adjust viewports to the same size
noremap <Leader>= <C-w>=

" visual [in|out]dentation (does not exit Visual mode)
vnoremap > >gv
vnoremap < <gv

" }}}
" Searching and movement -------------------------------------------------- {{{

set incsearch				" show match for partly typed search command
set hlsearch				" highlight all matches for the last used search pattern

set scrolloff=1				" number of screen lines to show around the cursor

nnoremap <silent> <Leader><Leader> :nohl<CR>

" }}}
" Plugin settings --------------------------------------------------------- {{{

" NERDTree {{{

noremap <F4> :NERDTreeToggle<CR>
inoremap <F4> <Esc>:NERDTreeToggle<CR>

" Close all open buffers on entering a window if the only buffer that's left is the NERDTree buffer
" original source: https://github.com/scrooloose/nerdtree/issues/21
function! s:CloseIfNERDTreeIsOnlyWindow()
	if exists("t:NERDTreeBufName")
		let nr = bufwinnr(t:NERDTreeBufName)
		if nr != -1
			if winnr("$") == 1
				q
			endif
		endif
	endif
endfunction
autocmd WinEnter * call s:CloseIfNERDTreeIsOnlyWindow()

" }}}

" }}}
" Mini-plugins ------------------------------------------------------------ {{{

" DiffOrig {{{

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		\ | wincmd p | diffthis
endif

" }}}

" }}}
" Environments (GUI/Console) ---------------------------------------------- {{{

if has('gui_running')
	" GUI Vim
	set guifont=DejaVu_Sans_Mono_for_Powerline:h10:cANSI,Consolas:h11:cDEFAULT

	set columns=150			" width of the display
	set lines=45			" number of lines in the display

	" remove all the GUI cruft
	set guioptions-=m		" remove menu bar
	set guioptions-=T		" remove Toolbar
	set guioptions-=r		" remove (always-visible) right-hand scrollbar
	set guioptions-=L		" remove left-hand scrollbar
	
	" if has('gui_win32')
	" 	" gVim
	" endif
else
	" console Vim
endif

" }}}

" vim: set foldlevel=0 foldmethod=marker:
